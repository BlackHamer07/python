자료구조
1) 리스트 = list()
2) 튜플 = tuple()
3) 딕셔너리 = dict()

쓰임새는 저렇게 된다.
자세하게 살펴보자면

1] 리스트 (다른 언어에서 배열과 비슷하다)
= 숫자나 문자열이 모두 들어가며 두 (x,y)리스트들을 합쳐서 사용이 가능하다.
= 리스트 안의 값을 변경이 가능하다. x[3] = 10
= 리스트의 크기보다 더 큰 크기를 확인하면 에러가 남(당연)
-->쓰는방법<--
x = list()
y = []

print(x)
print(y)
==> 이것의 결과값은 x = (), y = ()이다

또한 응용을 해보자면
x = [1,2,3,4]
print(x)
==> [1,2,3,4]의 결과값이 나온다

**여기에서 n번째 자리에 있는 값을 보고싶다라고 가정을 한다**
print문에서 print(x[0])과 같이 쓰면 된다.

리스트의 함수
1. sorted는 오름차순으로 정렬
x = [4,3,2,1]

num = sorted(x)
print(num)
--> 결과값으로는 [1,2,3,4]의 결과값이 나온다

2. sum은 리스트 안에 값들을 합침
x = [1,2,3,4]

num = sum(x)
print(num)
--> 결과값으로는 x리스트의 합계가 나온다

3. 반복문(중요)
x = [1,2,3,4]

for i in x:
  print(i)
--> x의 리스트의 값들을 하나씩 보여줘라는 말이다.
--> 결과값은 당연히 1,2,3,4가 나옴

4. index() -> 엘레먼트위치(중요)
x = [1,2,3,4]
y = ["Hello","there"]

print(x.index(3))
print(y.index("Hello"))
--> 결과값으로는 3의 리스트 위치 2와 "Hello"의 리스트위치 0을 도출해낸다.
--> 리스트에 없는것을 물어보면 당연히 에러가 난다.
---> 단지 나는 "Hello"가 리스트에 있는지 궁금하다
---> print("Hello" in y)로 확인이 가능함 그럼 결과값으로 True가 뜸 존재하지 않으면 당연히 false가 뜬다.
----> 조건문이랑 같이 쓰이게 된다면 if "Hello" in y: 로 구문을 시작하면 된다.


2] 튜플 (리스트는 대괄호를 쓴다고하면 튜플은 소괄호를 사용하게 된다.)
-->쓰는방법<--
x = tuple()
y = ()

print(x)
print(y)
-> 리스트와 다르게 튜플은 소괄호가 찍혀나온다.
= 리스트와 같이 쓰는 함수들을 모두 공유하여 사용할 수 있다.

***리스트와 튜플의 가장 큰 차이점***
-> Assignment : 튜플 안의 값을 업데이트하는 것
리스트는 리스트 안의 값을 변경(업데이트)가 가능하지만 튜플은 변경(업데이트)이 불가능하다
--> 그리하여 리스트는 가변이라 부르고 튜플은 불변이라고 부른다.


3] 딕셔너리
-->쓰는방법<--
x = dict()
y = {}
print(x)
print(y)

1. 딕셔너리는 key와 value로 이루어짐
x = {
  "name" : "GG"
  "age" : 20
}
print(x["name"])
pint(x["age"])
-> key값에 들어갈 수 있는 값은 불변하는 것만 들어갈 수 있다.
--> 또한 리스트와 튜플과 마찬가지로 키가 존재하는지 확인하면
--> print("name" in x)로 쓰면 True의 값이나 false의 값 둘 중 하나를 찍어낸다.
---> 딕셔너리에 있는 모든 key를 보여달라고 요청을 할 수 있다.
---> print(x.keys())라 하게 되면 결과값으로 key값만 즉, "name"과 "age"만 찍어낸다. 이와같이 value도 같다고 본다.print(x.values())를 하면 value의 값들만 나열한다.
----> for key in x:
        print(key) = key값을 보여준다
        print(x[key]) = key값의 value를 보여준다.
-----> 딕셔너리는 튜플과 다르고 리스트와 같이 Assignment가 가능하다.
